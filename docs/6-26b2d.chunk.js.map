{"version":3,"sources":["webpack:///6-26b2d.chunk.js","webpack:///./src/pages/docs/Themes.js"],"names":["webpackJsonp","144","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","_jsxFileName","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","_react","_react2","_layouts","Themes","_React$Component","this","getPrototypeOf","apply","arguments","createElement","Scaffold","__source","fileName","lineNumber","__self","H1","mb5","Section","P","Code","Inline","H2","Link","to","H3","List","Item","Component"],"mappings":"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","file":"6-26b2d.chunk.js","sourcesContent":["webpackJsonp([6],{\n\n/***/ 144:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tvar _jsxFileName = '/Users/danielberndt/workspace/react-reform/doc-engine/src/pages/docs/Themes.js';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _layouts = __webpack_require__(21);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar Themes = function (_React$Component) {\n\t  _inherits(Themes, _React$Component);\n\t\n\t  function Themes() {\n\t    _classCallCheck(this, Themes);\n\t\n\t    return _possibleConstructorReturn(this, (Themes.__proto__ || Object.getPrototypeOf(Themes)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Themes, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      return _react2.default.createElement(\n\t        _layouts.Scaffold,\n\t        {\n\t          __source: {\n\t            fileName: _jsxFileName,\n\t            lineNumber: 8\n\t          },\n\t          __self: this\n\t        },\n\t        _react2.default.createElement(\n\t          _layouts.H1,\n\t          { mb5: true, __source: {\n\t              fileName: _jsxFileName,\n\t              lineNumber: 9\n\t            },\n\t            __self: this\n\t          },\n\t          'Themes'\n\t        ),\n\t        _react2.default.createElement(\n\t          _layouts.Section,\n\t          {\n\t            __source: {\n\t              fileName: _jsxFileName,\n\t              lineNumber: 10\n\t            },\n\t            __self: this\n\t          },\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 11\n\t              },\n\t              __self: this\n\t            },\n\t            'Themes are probably the most central piece of React Reform. Use the ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 11\n\t                },\n\t                __self: this\n\t              },\n\t              'createTheme'\n\t            ),\n\t            ' function to pass all necessary information about how you want to render your forms.'\n\t          )\n\t        ),\n\t        _react2.default.createElement(\n\t          _layouts.Section,\n\t          {\n\t            __source: {\n\t              fileName: _jsxFileName,\n\t              lineNumber: 13\n\t            },\n\t            __self: this\n\t          },\n\t          _react2.default.createElement(\n\t            _layouts.H2,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 14\n\t              },\n\t              __self: this\n\t            },\n\t            'Minimal Example'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 15\n\t              },\n\t              __self: this\n\t            },\n\t            'To give you a quick impression of how things work let\\'s start with a simple example:'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.Code,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 16\n\t              },\n\t              __self: this\n\t            },\n\t            '\\n            createTheme({\\n\\n              renderForm: (FormContainer, children) => (\\n                <FormContainer>\\n                  <div>{children}</div>\\n                  <button>Submit</button>\\n                </FormContainer>\\n              ),\\n\\n              renderField: (Field, {name, validations}) => {\\n                const errors = validations\\n                  .filter(({isValid}) => isValid === false)\\n                  .map(({errorMessage, name}) => <span key={name}>{errorMessage} </span>)\\n                return (\\n                  <div>\\n                    <label>{name}</label>\\n                    <Field/>\\n                    {errors.length > 0 && <span>{errors}</span>}\\n                  </div>\\n                )\\n              }\\n\\n            })\\n          '\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 41\n\t              },\n\t              __self: this\n\t            },\n\t            'This results in an unstyled form with it\\'s fields getting basic error messages.'\n\t          )\n\t        ),\n\t        _react2.default.createElement(\n\t          _layouts.Section,\n\t          {\n\t            __source: {\n\t              fileName: _jsxFileName,\n\t              lineNumber: 43\n\t            },\n\t            __self: this\n\t          },\n\t          _react2.default.createElement(\n\t            _layouts.H2,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 44\n\t              },\n\t              __self: this\n\t            },\n\t            'Full Example'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 45\n\t              },\n\t              __self: this\n\t            },\n\t            'Now let\\'s take a look at a more complete Example. While the lines below certainly offer nothing production ready, they certainly should hint at most of what React Reform is capable of and how it\\'s supposed to work.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.Code,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 46\n\t              },\n\t              __self: this\n\t            },\n\t            '\\n            createTheme({\\n\\n              renderForm: (FormContainer, children, {directProps: {buttonLabel, style, ...remainingDirectProps}, isValid, status, globalErrors}) => (\\n                <FormContainer {...remainingDirectProps} style={{background: isValid ? \"green\" : \"red\", ...style}}>\\n                  {globalErrors.length ? (\\n                    globalErrors.map((error, i) => <div style={{color: \"red\"}} key={i}>{error}</div>)\\n                  ) : null}\\n                  <div>{children}</div>\\n                  <button disabled={status === \"pending\"}>Submit</button>\\n                </FormContainer>\\n              ),\\n\\n              renderField: (Field, {name, validations, directProps, wrapperProps, id, isDirty, isTouched, isFocused, formStatus}) => {\\n                const errors = validations\\n                  .filter(({isValid}) => isValid === false)\\n                  .map(({errorMessage, name}) => <span key={name}>{errorMessage} </span>)\\n                const hints = validations.map(({hintMessage, name}) => <span key={name}>{hintMessage} </span>)\\n\\n                const label = (\\n                  <label htmlFor={id}\\n                    style={{color: errors.length > 0 && isDirty ? \"red\" : \"black\"}}\\n                  >{directProps.label || name}</label>\\n                )\\n\\n                const field = (\\n                  <Field id={id}\\n                    disabled={formStatus === \"pending\"}\\n                    style={{border: `1px solid ${isFocused ? \"blue\" : \"black\"}`}}\\n                  />\\n                )\\n\\n                return (\\n                  <div>\\n                    {wrapperProps.type === \"Checkbox\" ? (\\n                      <div>{field} {label}</div>\\n                    ) : (\\n                      <div>{label} {field}</div>\\n                    )}\\n                    {hints.length > 0 && <span>{hints}</span>}\\n                    {directProps.explanation && <div className=\"form-explanaition\">{directProps.explanation}</div>}\\n                    {errors.length > 0 && !isTouched && <span>{errors}</span>}\\n                  </div>\\n                )\\n              }\\n\\n              validationLabels: {\\n                required: {\\n                  errorMessage: (val, {name, arg}) => `\\'${name}\\' is really required`\\n                }\\n              }\\n\\n            })\\n          '\n\t          )\n\t        ),\n\t        _react2.default.createElement(\n\t          _layouts.Section,\n\t          {\n\t            __source: {\n\t              fileName: _jsxFileName,\n\t              lineNumber: 101\n\t            },\n\t            __self: this\n\t          },\n\t          _react2.default.createElement(\n\t            _layouts.H2,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 102\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 102\n\t                },\n\t                __self: this\n\t              },\n\t              'createTheme(themeDefinition)'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 103\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 103\n\t                },\n\t                __self: this\n\t              },\n\t              'createTheme(themeDefinition)'\n\t            ),\n\t            ' expects a ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 103\n\t                },\n\t                __self: this\n\t              },\n\t              'themeDefinition'\n\t            ),\n\t            ' of this shape'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.Code,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 104\n\t              },\n\t              __self: this\n\t            },\n\t            '\\n            const themeDefinition = {\\n              renderForm: renderFormFn,\\n              renderField: renderFieldFn,\\n              validationLabels: validationLabelsObject (optional)\\n            }\\n          '\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 111\n\t              },\n\t              __self: this\n\t            },\n\t            'This function returns a theme object which can be used either in the ',\n\t            _react2.default.createElement(\n\t              _layouts.Link,\n\t              { to: '/docs/reform-context/', __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 111\n\t                },\n\t                __self: this\n\t              },\n\t              _react2.default.createElement(\n\t                _layouts.Code.Inline,\n\t                {\n\t                  __source: {\n\t                    fileName: _jsxFileName,\n\t                    lineNumber: 111\n\t                  },\n\t                  __self: this\n\t                },\n\t                'ReformContext'\n\t              )\n\t            ),\n\t            ' component or can be passed directly to a form\\'s ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 111\n\t                },\n\t                __self: this\n\t              },\n\t              'theme'\n\t            ),\n\t            ' prop.'\n\t          )\n\t        ),\n\t        _react2.default.createElement(\n\t          _layouts.Section,\n\t          {\n\t            __source: {\n\t              fileName: _jsxFileName,\n\t              lineNumber: 113\n\t            },\n\t            __self: this\n\t          },\n\t          _react2.default.createElement(\n\t            _layouts.H2,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 114\n\t              },\n\t              __self: this\n\t            },\n\t            'renderFormFn: ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 114\n\t                },\n\t                __self: this\n\t              },\n\t              '(FormContainer, children, data) => {...}'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 115\n\t              },\n\t              __self: this\n\t            },\n\t            'This function allows you to define the body of all the forms using your theme. Typically this includes global error messages (i.e messages that are not specific to a field) and the submit button (if any)'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 116\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 116\n\t                },\n\t                __self: this\n\t              },\n\t              'FormContainer'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 117\n\t              },\n\t              __self: this\n\t            },\n\t            'The ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 117\n\t                },\n\t                __self: this\n\t              },\n\t              'FormContainer'\n\t            ),\n\t            ' represents the actual ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 117\n\t                },\n\t                __self: this\n\t              },\n\t              '<form/>'\n\t            ),\n\t            ' tag. It\\'s up to the theme-author to decide if users may pass props to this Component. In this case you may write something like ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 117\n\t                },\n\t                __self: this\n\t              },\n\t              '<FormContainer {...data.directProps}>'\n\t            ),\n\t            '.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 118\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 118\n\t                },\n\t                __self: this\n\t              },\n\t              'children'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 119\n\t              },\n\t              __self: this\n\t            },\n\t            'As the name suggests, this argument contains the form\\'s children. I.e. the fields of the form.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 120\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 120\n\t                },\n\t                __self: this\n\t              },\n\t              'data.directProps'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 121\n\t              },\n\t              __self: this\n\t            },\n\t            'This field contains all the props that the user passes to the form. This could be used to allow overwriting/extending the ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 121\n\t                },\n\t                __self: this\n\t              },\n\t              'style'\n\t            ),\n\t            ' or ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 121\n\t                },\n\t                __self: this\n\t              },\n\t              'className'\n\t            ),\n\t            ' of a form.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 122\n\t              },\n\t              __self: this\n\t            },\n\t            'You may also define your own contracts and allow the user to pass props like ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 122\n\t                },\n\t                __self: this\n\t              },\n\t              'buttonLabel'\n\t            ),\n\t            ' or ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 122\n\t                },\n\t                __self: this\n\t              },\n\t              'noButton'\n\t            ),\n\t            ' or ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 122\n\t                },\n\t                __self: this\n\t              },\n\t              'formWidth'\n\t            ),\n\t            ' to customise the form according to your theme\\'s capabilities.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 123\n\t              },\n\t              __self: this\n\t            },\n\t            'Note that ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 123\n\t                },\n\t                __self: this\n\t              },\n\t              'directProps'\n\t            ),\n\t            ' actually doesn\\'t include ',\n\t            _react2.default.createElement(\n\t              'i',\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 123\n\t                },\n\t                __self: this\n\t              },\n\t              'all'\n\t            ),\n\t            ' props. ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 123\n\t                },\n\t                __self: this\n\t              },\n\t              'theme'\n\t            ),\n\t            ', ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 123\n\t                },\n\t                __self: this\n\t              },\n\t              'children'\n\t            ),\n\t            ', ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 123\n\t                },\n\t                __self: this\n\t              },\n\t              'onSubmit'\n\t            ),\n\t            ', ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 123\n\t                },\n\t                __self: this\n\t              },\n\t              'model'\n\t            ),\n\t            ', ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 123\n\t                },\n\t                __self: this\n\t              },\n\t              'initialModel'\n\t            ),\n\t            ' and ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 123\n\t                },\n\t                __self: this\n\t              },\n\t              'onFieldChange'\n\t            ),\n\t            ' get exlcuded.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 124\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 124\n\t                },\n\t                __self: this\n\t              },\n\t              'data.globalErrors'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 125\n\t              },\n\t              __self: this\n\t            },\n\t            'When a form\\'s ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 125\n\t                },\n\t                __self: this\n\t              },\n\t              'onSubmit'\n\t            ),\n\t            ' handler returns a promise that gets rejected, you may decide whether to reject with an object describing which fields were the reason, or whether to reject with a string or React element. The latter will be found in the ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 125\n\t                },\n\t                __self: this\n\t              },\n\t              'globalErrors'\n\t            ),\n\t            ' list.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 126\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 126\n\t                },\n\t                __self: this\n\t              },\n\t              'data.globalErrors'\n\t            ),\n\t            '\\'s shape looks like this'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.Code,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 127\n\t              },\n\t              __self: this\n\t            },\n\t            '\\n             [\\n              \\'Your error message as a String (if you reject with reject(string)), you may also reject an React element.\\',\\n              {fieldName: \\'if you reject with `reject({fieldName: string})` and a field with `name=\"fieldName\"` is not present in your form, it\\'ll be here\\'},\\n            ]\\n          '\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 133\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 133\n\t                },\n\t                __self: this\n\t              },\n\t              'data.isValid'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 134\n\t              },\n\t              __self: this\n\t            },\n\t            'If all fields\\' ',\n\t            _react2.default.createElement(\n\t              _layouts.Link,\n\t              { to: '/docs/validations/', __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 134\n\t                },\n\t                __self: this\n\t              },\n\t              'validations'\n\t            ),\n\t            ' return ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 134\n\t                },\n\t                __self: this\n\t              },\n\t              'true'\n\t            ),\n\t            ', ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 134\n\t                },\n\t                __self: this\n\t              },\n\t              'isValid'\n\t            ),\n\t            ' will be ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 134\n\t                },\n\t                __self: this\n\t              },\n\t              'true'\n\t            ),\n\t            '. ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 134\n\t                },\n\t                __self: this\n\t              },\n\t              'false'\n\t            ),\n\t            ' in all other cases.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 135\n\t              },\n\t              __self: this\n\t            },\n\t            'Note that you may define (async) validations that return strings like ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 135\n\t                },\n\t                __self: this\n\t              },\n\t              '\"pending\"'\n\t            ),\n\t            ' in this case ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 135\n\t                },\n\t                __self: this\n\t              },\n\t              'isValid'\n\t            ),\n\t            ' will be ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 135\n\t                },\n\t                __self: this\n\t              },\n\t              'false'\n\t            ),\n\t            ' as well.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 136\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 136\n\t                },\n\t                __self: this\n\t              },\n\t              'data.validationsPerField'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 137\n\t              },\n\t              __self: this\n\t            },\n\t            'For more fine grained control you may access all validation objects from all fields. This field will have a shape like this:'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.Code,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 138\n\t              },\n\t              __self: this\n\t            },\n\t            '\\n            {\\n              fieldName1: [\\n                {name: \\'required\\', isValid: true, errorMessage: \\'...\\', hintMessage: \\'...\\'},\\n                ...\\n              ],\\n              fieldName2: [\\n                {name: \\'unique\\', isValid: \"pending\", errorMessage: \\'...\\', hintMessage: \\'...\\'}\\n              ],\\n            }\\n          '\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 149\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 149\n\t                },\n\t                __self: this\n\t              },\n\t              'data.status'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 150\n\t              },\n\t              __self: this\n\t            },\n\t            'This field indicates the current state of the form. ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 150\n\t                },\n\t                __self: this\n\t              },\n\t              'status'\n\t            ),\n\t            ' can have these values:'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.List,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 151\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.List.Item,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 152\n\t                },\n\t                __self: this\n\t              },\n\t              _react2.default.createElement(\n\t                _layouts.Code.Inline,\n\t                {\n\t                  __source: {\n\t                    fileName: _jsxFileName,\n\t                    lineNumber: 152\n\t                  },\n\t                  __self: this\n\t                },\n\t                '\\'unsubmitted\\''\n\t              ),\n\t              ': the form wasn\\'t submitted yet'\n\t            ),\n\t            _react2.default.createElement(\n\t              _layouts.List.Item,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 153\n\t                },\n\t                __self: this\n\t              },\n\t              _react2.default.createElement(\n\t                _layouts.Code.Inline,\n\t                {\n\t                  __source: {\n\t                    fileName: _jsxFileName,\n\t                    lineNumber: 153\n\t                  },\n\t                  __self: this\n\t                },\n\t                '\\'preSubmitFail\\''\n\t              ),\n\t              ': the form was submitted but validation errors were found.'\n\t            ),\n\t            _react2.default.createElement(\n\t              _layouts.List.Item,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 154\n\t                },\n\t                __self: this\n\t              },\n\t              _react2.default.createElement(\n\t                _layouts.Code.Inline,\n\t                {\n\t                  __source: {\n\t                    fileName: _jsxFileName,\n\t                    lineNumber: 154\n\t                  },\n\t                  __self: this\n\t                },\n\t                '\\'pending\\''\n\t              ),\n\t              ': the form\\'s ',\n\t              _react2.default.createElement(\n\t                _layouts.Code.Inline,\n\t                {\n\t                  __source: {\n\t                    fileName: _jsxFileName,\n\t                    lineNumber: 154\n\t                  },\n\t                  __self: this\n\t                },\n\t                'onSubmit'\n\t              ),\n\t              ' handler returned a Promise and was neither resolved nor rejected yet.'\n\t            ),\n\t            _react2.default.createElement(\n\t              _layouts.List.Item,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 155\n\t                },\n\t                __self: this\n\t              },\n\t              _react2.default.createElement(\n\t                _layouts.Code.Inline,\n\t                {\n\t                  __source: {\n\t                    fileName: _jsxFileName,\n\t                    lineNumber: 155\n\t                  },\n\t                  __self: this\n\t                },\n\t                '\\'success\\''\n\t              ),\n\t              ': the form\\'s ',\n\t              _react2.default.createElement(\n\t                _layouts.Code.Inline,\n\t                {\n\t                  __source: {\n\t                    fileName: _jsxFileName,\n\t                    lineNumber: 155\n\t                  },\n\t                  __self: this\n\t                },\n\t                'onSubmit'\n\t              ),\n\t              ' handler returned a Promise and the Promise was resolved.'\n\t            ),\n\t            _react2.default.createElement(\n\t              _layouts.List.Item,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 156\n\t                },\n\t                __self: this\n\t              },\n\t              _react2.default.createElement(\n\t                _layouts.Code.Inline,\n\t                {\n\t                  __source: {\n\t                    fileName: _jsxFileName,\n\t                    lineNumber: 156\n\t                  },\n\t                  __self: this\n\t                },\n\t                '\\'postSubmitFail\\''\n\t              ),\n\t              ': the form\\'s ',\n\t              _react2.default.createElement(\n\t                _layouts.Code.Inline,\n\t                {\n\t                  __source: {\n\t                    fileName: _jsxFileName,\n\t                    lineNumber: 156\n\t                  },\n\t                  __self: this\n\t                },\n\t                'onSubmit'\n\t              ),\n\t              ' handler returned a Promise and the Promise was rejected.'\n\t            ),\n\t            _react2.default.createElement(\n\t              _layouts.List.Item,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 157\n\t                },\n\t                __self: this\n\t              },\n\t              _react2.default.createElement(\n\t                _layouts.Code.Inline,\n\t                {\n\t                  __source: {\n\t                    fileName: _jsxFileName,\n\t                    lineNumber: 157\n\t                  },\n\t                  __self: this\n\t                },\n\t                '\\'UNCERTAIN STATUS\\''\n\t              ),\n\t              ': the form\\'s ',\n\t              _react2.default.createElement(\n\t                _layouts.Code.Inline,\n\t                {\n\t                  __source: {\n\t                    fileName: _jsxFileName,\n\t                    lineNumber: 157\n\t                  },\n\t                  __self: this\n\t                },\n\t                'onSubmit'\n\t              ),\n\t              ' handler returned no promise. This still is a TODO. So please file an issue if you have good generalisable idea for a status here.'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 159\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 159\n\t                },\n\t                __self: this\n\t              },\n\t              'data.submitForm'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 160\n\t              },\n\t              __self: this\n\t            },\n\t            'If your theme is attempting some non-standard submit behaviours, you get access to the submit function which will validate the form and invoke the form\\'s ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 160\n\t                },\n\t                __self: this\n\t              },\n\t              'onSubmit'\n\t            ),\n\t            ' handler.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 161\n\t              },\n\t              __self: this\n\t            },\n\t            'Have a look at the ',\n\t            _react2.default.createElement(\n\t              _layouts.Link,\n\t              { to: '/recipes/#multiple-submit', __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 161\n\t                },\n\t                __self: this\n\t              },\n\t              'Multiple submit buttons recipe'\n\t            ),\n\t            ' to see a use-case.'\n\t          )\n\t        ),\n\t        _react2.default.createElement(\n\t          _layouts.Section,\n\t          {\n\t            __source: {\n\t              fileName: _jsxFileName,\n\t              lineNumber: 163\n\t            },\n\t            __self: this\n\t          },\n\t          _react2.default.createElement(\n\t            _layouts.H2,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 164\n\t              },\n\t              __self: this\n\t            },\n\t            'renderFieldFn: ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 164\n\t                },\n\t                __self: this\n\t              },\n\t              '(Field, data) => {...}'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 165\n\t              },\n\t              __self: this\n\t            },\n\t            'This function let\\'s you describe how each field should be rendered and how to display its different states.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 166\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 166\n\t                },\n\t                __self: this\n\t              },\n\t              'Field'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 167\n\t              },\n\t              __self: this\n\t            },\n\t            'The ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 167\n\t                },\n\t                __self: this\n\t              },\n\t              'Field'\n\t            ),\n\t            ' contains the ',\n\t            _react2.default.createElement(\n\t              _layouts.Link,\n\t              { to: '/docs/wrap-input', __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 167\n\t                },\n\t                __self: this\n\t              },\n\t              'wrapped input'\n\t            ),\n\t            '. You may pass any props to it and may access them via ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 167\n\t                },\n\t                __self: this\n\t              },\n\t              'WrapInput'\n\t            ),\n\t            '\\'s ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 167\n\t                },\n\t                __self: this\n\t              },\n\t              'themeProps'\n\t            ),\n\t            '. The recommended behaviour is to pass all ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 167\n\t                },\n\t                __self: this\n\t              },\n\t              'themeProps'\n\t            ),\n\t            ' directly to the input. So please filter your props here in the ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 167\n\t                },\n\t                __self: this\n\t              },\n\t              'renderField'\n\t            ),\n\t            ' function.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 168\n\t              },\n\t              __self: this\n\t            },\n\t            'Typically you want to set ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 168\n\t                },\n\t                __self: this\n\t              },\n\t              'className'\n\t            ),\n\t            ', ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 168\n\t                },\n\t                __self: this\n\t              },\n\t              'style'\n\t            ),\n\t            ' or ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 168\n\t                },\n\t                __self: this\n\t              },\n\t              'id'\n\t            ),\n\t            ' props. But depending on your requirements you may also set e.g. ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 168\n\t                },\n\t                __self: this\n\t              },\n\t              'onBlur'\n\t            ),\n\t            ' handlers.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 169\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 169\n\t                },\n\t                __self: this\n\t              },\n\t              'data.directProps'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 170\n\t              },\n\t              __self: this\n\t            },\n\t            'This field contains all the non-validation props that the user passes to the input (minus the ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 170\n\t                },\n\t                __self: this\n\t              },\n\t              'name'\n\t            ),\n\t            ') prop. Use this to pass style or class information to the input. You may also allow custom props such as ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 170\n\t                },\n\t                __self: this\n\t              },\n\t              'label'\n\t            ),\n\t            ' or ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 170\n\t                },\n\t                __self: this\n\t              },\n\t              'explanation'\n\t            ),\n\t            ' and deal with those within your theme.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 171\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 171\n\t                },\n\t                __self: this\n\t              },\n\t              'data.name'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 172\n\t              },\n\t              __self: this\n\t            },\n\t            'Contains the required ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 172\n\t                },\n\t                __self: this\n\t              },\n\t              'name'\n\t            ),\n\t            ' attribute passed to input. Might act as a good fallback if no better label is present.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 173\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 173\n\t                },\n\t                __self: this\n\t              },\n\t              'data.validations'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 174\n\t              },\n\t              __self: this\n\t            },\n\t            'A list comprised of the validation objects for each validation on this input. It has a shape like this:'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.Code,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 175\n\t              },\n\t              __self: this\n\t            },\n\t            '\\n            [\\n              {name: \\'required\\', isValid: true, errorMessage: \\'...\\', hintMessage: \\'...\\'},\\n              {name: \\'unique\\', isValid: \"pending\", errorMessage: \\'...\\', hintMessage: \\'...\\'},\\n              {name: \\'minlength\\', isValid: false, errorMessage: \\'...\\', hintMessage: \\'...\\'}\\n            }\\n          '\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 182\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 182\n\t                },\n\t                __self: this\n\t              },\n\t              'data.wrapperProps'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 183\n\t              },\n\t              __self: this\n\t            },\n\t            'When ',\n\t            _react2.default.createElement(\n\t              _layouts.Link,\n\t              { to: '/docs/wrap-input', __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 183\n\t                },\n\t                __self: this\n\t              },\n\t              'wrapping your inputs'\n\t            ),\n\t            ' you may pass props to the ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 183\n\t                },\n\t                __self: this\n\t              },\n\t              'WrapInput'\n\t            ),\n\t            ' component. For example, it\\'s recommended to pass a ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 183\n\t                },\n\t                __self: this\n\t              },\n\t              'type'\n\t            ),\n\t            ' prop to help differenatiate between different inputs. Have a look at the ',\n\t            _react2.default.createElement(\n\t              'b',\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 183\n\t                },\n\t                __self: this\n\t              },\n\t              'Full example'\n\t            ),\n\t            ' above to see how it may help you.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 184\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 184\n\t                },\n\t                __self: this\n\t              },\n\t              'data.directFormProps'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 185\n\t              },\n\t              __self: this\n\t            },\n\t            'Sometimes it might be useful to set some properties on a form that should affect all fields. Think of e.g. ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 185\n\t                },\n\t                __self: this\n\t              },\n\t              '<Form onSubmit={...} fieldHeight=\"big\">'\n\t            ),\n\t            '. ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 185\n\t                },\n\t                __self: this\n\t              },\n\t              'directFormProps'\n\t            ),\n\t            ' allows you to access this information.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 186\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 186\n\t                },\n\t                __self: this\n\t              },\n\t              'data.id'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 187\n\t              },\n\t              __self: this\n\t            },\n\t            'Contains a generated and unique id which can be used to bind a label to a input via ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 187\n\t                },\n\t                __self: this\n\t              },\n\t              'htmlFor'\n\t            ),\n\t            '.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 188\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 188\n\t                },\n\t                __self: this\n\t              },\n\t              'data.isDirty'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 189\n\t              },\n\t              __self: this\n\t            },\n\t            'Is ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 189\n\t                },\n\t                __self: this\n\t              },\n\t              'true'\n\t            ),\n\t            ' if the input\\'s ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 189\n\t                },\n\t                __self: this\n\t              },\n\t              'onChange'\n\t            ),\n\t            ' was called once.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 190\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 190\n\t                },\n\t                __self: this\n\t              },\n\t              'data.isTouched'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 191\n\t              },\n\t              __self: this\n\t            },\n\t            'Is ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 191\n\t                },\n\t                __self: this\n\t              },\n\t              'true'\n\t            ),\n\t            ' if the input\\'s ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 191\n\t                },\n\t                __self: this\n\t              },\n\t              'onFocus'\n\t            ),\n\t            ' was called once.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 192\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 192\n\t                },\n\t                __self: this\n\t              },\n\t              'data.isFocused'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 193\n\t              },\n\t              __self: this\n\t            },\n\t            'Is ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 193\n\t                },\n\t                __self: this\n\t              },\n\t              'true'\n\t            ),\n\t            ' if the input is currently focused.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 194\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 194\n\t                },\n\t                __self: this\n\t              },\n\t              'data.submitForm'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 195\n\t              },\n\t              __self: this\n\t            },\n\t            'As with the ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 195\n\t                },\n\t                __self: this\n\t              },\n\t              'renderForm'\n\t            ),\n\t            ' function above, you have access to the form\\'s submit handler to allow for custom submit behaviour. Have a look at the ',\n\t            _react2.default.createElement(\n\t              _layouts.Link,\n\t              { to: '/recipes/#submit-on-blur', __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 195\n\t                },\n\t                __self: this\n\t              },\n\t              'Submit on blur recipe'\n\t            ),\n\t            ' to see how it might help.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 196\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 196\n\t                },\n\t                __self: this\n\t              },\n\t              'data.formStatus'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 197\n\t              },\n\t              __self: this\n\t            },\n\t            'Contains the form\\'s status described in the ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 197\n\t                },\n\t                __self: this\n\t              },\n\t              'renderFormFn'\n\t            ),\n\t            ' section above. Use it if you would like to disable the inputs while the form is ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 197\n\t                },\n\t                __self: this\n\t              },\n\t              '\\'pending\\''\n\t            ),\n\t            '.'\n\t          )\n\t        ),\n\t        _react2.default.createElement(\n\t          _layouts.Section,\n\t          {\n\t            __source: {\n\t              fileName: _jsxFileName,\n\t              lineNumber: 199\n\t            },\n\t            __self: this\n\t          },\n\t          _react2.default.createElement(\n\t            _layouts.H2,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 200\n\t              },\n\t              __self: this\n\t            },\n\t            'validationLabelsObject'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 201\n\t              },\n\t              __self: this\n\t            },\n\t            'Specific themes might want to phrase validation messages differently. To allow for this feature, add a validation object of this shape to overwrite the validation\\'s default messages:'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.Code,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 202\n\t              },\n\t              __self: this\n\t            },\n\t            '\\n            {\\n              required: {\\n                errorMessage: (val, {name, arg}) => `\\'${name}\\' is really required`,\\n                hintMessage: (val, {name, arg}) => `\\'${name}\\' needs to be set.`,\\n              }\\n            }\\n          '\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 210\n\t              },\n\t              __self: this\n\t            },\n\t            'Note that you may omit either ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 210\n\t                },\n\t                __self: this\n\t              },\n\t              'hintMessage'\n\t            ),\n\t            ' or ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 210\n\t                },\n\t                __self: this\n\t              },\n\t              'errorMessage'\n\t            ),\n\t            ' to fallback to the validation\\'s default message.'\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Themes;\n\t}(_react2.default.Component);\n\t\n\texports.default = Themes;\n\n/***/ }\n\n});\n\n\n// WEBPACK FOOTER //\n// 6-26b2d.chunk.js","import React from 'react'\nimport {Scaffold, H1, H2, H3, P, Code, Section, Link, List} from 'comps/layouts'\n\nexport default class Themes extends React.Component {\n\n  render() {\n    return (\n      <Scaffold>\n        <H1 mb5>Themes</H1>\n        <Section>\n          <P>Themes are probably the most central piece of React Reform. Use the <Code.Inline>createTheme</Code.Inline> function to pass all necessary information about how you want to render your forms.</P>\n        </Section>\n        <Section>\n          <H2>Minimal Example</H2>\n          <P>To give you a quick impression of how things work let's start with a simple example:</P>\n          <Code>{`\n            createTheme({\n\n              renderForm: (FormContainer, children) => (\n                <FormContainer>\n                  <div>{children}</div>\n                  <button>Submit</button>\n                </FormContainer>\n              ),\n\n              renderField: (Field, {name, validations}) => {\n                const errors = validations\n                  .filter(({isValid}) => isValid === false)\n                  .map(({errorMessage, name}) => <span key={name}>{errorMessage} </span>)\n                return (\n                  <div>\n                    <label>{name}</label>\n                    <Field/>\n                    {errors.length > 0 && <span>{errors}</span>}\n                  </div>\n                )\n              }\n\n            })\n          `}</Code>\n          <P>This results in an unstyled form with it's fields getting basic error messages.</P>\n        </Section>\n        <Section>\n          <H2>Full Example</H2>\n          <P>Now let's take a look at a more complete Example. While the lines below certainly offer nothing production ready, they certainly should hint at most of what React Reform is capable of and how it's supposed to work.</P>\n          <Code>{`\n            createTheme({\n\n              renderForm: (FormContainer, children, {directProps: {buttonLabel, style, ...remainingDirectProps}, isValid, status, globalErrors}) => (\n                <FormContainer {...remainingDirectProps} style={{background: isValid ? \"green\" : \"red\", ...style}}>\n                  {globalErrors.length ? (\n                    globalErrors.map((error, i) => <div style={{color: \"red\"}} key={i}>{error}</div>)\n                  ) : null}\n                  <div>{children}</div>\n                  <button disabled={status === \"pending\"}>Submit</button>\n                </FormContainer>\n              ),\n\n              renderField: (Field, {name, validations, directProps, wrapperProps, id, isDirty, isTouched, isFocused, formStatus}) => {\n                const errors = validations\n                  .filter(({isValid}) => isValid === false)\n                  .map(({errorMessage, name}) => <span key={name}>{errorMessage} </span>)\n                const hints = validations.map(({hintMessage, name}) => <span key={name}>{hintMessage} </span>)\n\n                const label = (\n                  <label htmlFor={id}\n                    style={{color: errors.length > 0 && isDirty ? \"red\" : \"black\"}}\n                  >{directProps.label || name}</label>\n                )\n\n                const field = (\n                  <Field id={id}\n                    disabled={formStatus === \"pending\"}\n                    style={{border: \\`1px solid \\${isFocused ? \"blue\" : \"black\"}\\`}}\n                  />\n                )\n\n                return (\n                  <div>\n                    {wrapperProps.type === \"Checkbox\" ? (\n                      <div>{field} {label}</div>\n                    ) : (\n                      <div>{label} {field}</div>\n                    )}\n                    {hints.length > 0 && <span>{hints}</span>}\n                    {directProps.explanation && <div className=\"form-explanaition\">{directProps.explanation}</div>}\n                    {errors.length > 0 && !isTouched && <span>{errors}</span>}\n                  </div>\n                )\n              }\n\n              validationLabels: {\n                required: {\n                  errorMessage: (val, {name, arg}) => \\`'\\${name}' is really required\\`\n                }\n              }\n\n            })\n          `}</Code>\n        </Section>\n        <Section>\n          <H2><Code.Inline>createTheme(themeDefinition)</Code.Inline></H2>\n          <P><Code.Inline>createTheme(themeDefinition)</Code.Inline> expects a <Code.Inline>themeDefinition</Code.Inline> of this shape</P>\n          <Code>{`\n            const themeDefinition = {\n              renderForm: renderFormFn,\n              renderField: renderFieldFn,\n              validationLabels: validationLabelsObject (optional)\n            }\n          `}</Code>\n          <P>This function returns a theme object which can be used either in the <Link to=\"/docs/reform-context/\"><Code.Inline>ReformContext</Code.Inline></Link> component or can be passed directly to a form's <Code.Inline>theme</Code.Inline> prop.</P>\n        </Section>\n        <Section>\n          <H2>renderFormFn: <Code.Inline>{'(FormContainer, children, data) => {...}'}</Code.Inline></H2>\n          <P>This function allows you to define the body of all the forms using your theme. Typically this includes global error messages (i.e messages that are not specific to a field) and the submit button (if any)</P>\n          <H3><Code.Inline>FormContainer</Code.Inline></H3>\n          <P>The <Code.Inline>FormContainer</Code.Inline> represents the actual <Code.Inline>{'<form/>'}</Code.Inline> tag. It's up to the theme-author to decide if users may pass props to this Component. In this case you may write something like <Code.Inline>{'<FormContainer {...data.directProps}>'}</Code.Inline>.</P>\n          <H3><Code.Inline>children</Code.Inline></H3>\n          <P>As the name suggests, this argument contains the form's children. I.e. the fields of the form.</P>\n          <H3><Code.Inline>data.directProps</Code.Inline></H3>\n          <P>This field contains all the props that the user passes to the form. This could be used to allow overwriting/extending the <Code.Inline>style</Code.Inline> or <Code.Inline>className</Code.Inline> of a form.</P>\n          <P>You may also define your own contracts and allow the user to pass props like <Code.Inline>buttonLabel</Code.Inline> or <Code.Inline>noButton</Code.Inline> or <Code.Inline>formWidth</Code.Inline> to customise the form according to your theme's capabilities.</P>\n          <P>Note that <Code.Inline>directProps</Code.Inline> actually doesn't include <i>all</i> props. <Code.Inline>theme</Code.Inline>, <Code.Inline>children</Code.Inline>, <Code.Inline>onSubmit</Code.Inline>, <Code.Inline>model</Code.Inline>, <Code.Inline>initialModel</Code.Inline> and <Code.Inline>onFieldChange</Code.Inline> get exlcuded.</P>\n          <H3><Code.Inline>data.globalErrors</Code.Inline></H3>\n          <P>When a form's <Code.Inline>onSubmit</Code.Inline> handler returns a promise that gets rejected, you may decide whether to reject with an object describing which fields were the reason, or whether to reject with a string or React element. The latter will be found in the <Code.Inline>globalErrors</Code.Inline> list.</P>\n          <P><Code.Inline>data.globalErrors</Code.Inline>'s shape looks like this</P>\n          <Code>{`\n             [\n              'Your error message as a String (if you reject with reject(string)), you may also reject an React element.',\n              {fieldName: 'if you reject with \\`reject({fieldName: string})\\` and a field with \\`name=\"fieldName\"\\` is not present in your form, it'll be here'},\n            ]\n          `}</Code>\n          <H3><Code.Inline>data.isValid</Code.Inline></H3>\n          <P>If all fields' <Link to=\"/docs/validations/\">validations</Link> return <Code.Inline>true</Code.Inline>, <Code.Inline>isValid</Code.Inline> will be <Code.Inline>true</Code.Inline>. <Code.Inline>false</Code.Inline> in all other cases.</P>\n          <P>Note that you may define (async) validations that return strings like <Code.Inline>\"pending\"</Code.Inline> in this case <Code.Inline>isValid</Code.Inline> will be <Code.Inline>false</Code.Inline> as well.</P>\n          <H3><Code.Inline>data.validationsPerField</Code.Inline></H3>\n          <P>For more fine grained control you may access all validation objects from all fields. This field will have a shape like this:</P>\n          <Code>{`\n            {\n              fieldName1: [\n                {name: 'required', isValid: true, errorMessage: '...', hintMessage: '...'},\n                ...\n              ],\n              fieldName2: [\n                {name: 'unique', isValid: \"pending\", errorMessage: '...', hintMessage: '...'}\n              ],\n            }\n          `}</Code>\n          <H3><Code.Inline>data.status</Code.Inline></H3>\n          <P>This field indicates the current state of the form. <Code.Inline>status</Code.Inline> can have these values:</P>\n          <List>\n            <List.Item><Code.Inline>'unsubmitted'</Code.Inline>: the form wasn't submitted yet</List.Item>\n            <List.Item><Code.Inline>'preSubmitFail'</Code.Inline>: the form was submitted but validation errors were found.</List.Item>\n            <List.Item><Code.Inline>'pending'</Code.Inline>: the form's <Code.Inline>onSubmit</Code.Inline> handler returned a Promise and was neither resolved nor rejected yet.</List.Item>\n            <List.Item><Code.Inline>'success'</Code.Inline>: the form's <Code.Inline>onSubmit</Code.Inline> handler returned a Promise and the Promise was resolved.</List.Item>\n            <List.Item><Code.Inline>'postSubmitFail'</Code.Inline>: the form's <Code.Inline>onSubmit</Code.Inline> handler returned a Promise and the Promise was rejected.</List.Item>\n            <List.Item><Code.Inline>'UNCERTAIN STATUS'</Code.Inline>: the form's <Code.Inline>onSubmit</Code.Inline> handler returned no promise. This still is a TODO. So please file an issue if you have good generalisable idea for a status here.</List.Item>\n          </List>\n          <H3><Code.Inline>data.submitForm</Code.Inline></H3>\n          <P>If your theme is attempting some non-standard submit behaviours, you get access to the submit function which will validate the form and invoke the form's <Code.Inline>onSubmit</Code.Inline> handler.</P>\n          <P>Have a look at the <Link to=\"/recipes/#multiple-submit\">Multiple submit buttons recipe</Link> to see a use-case.</P>\n        </Section>\n        <Section>\n          <H2>renderFieldFn: <Code.Inline>{'(Field, data) => {...}'}</Code.Inline></H2>\n          <P>This function let's you describe how each field should be rendered and how to display its different states.</P>\n          <H3><Code.Inline>Field</Code.Inline></H3>\n          <P>The <Code.Inline>Field</Code.Inline> contains the <Link to=\"/docs/wrap-input\">wrapped input</Link>. You may pass any props to it and may access them via <Code.Inline>WrapInput</Code.Inline>'s <Code.Inline>themeProps</Code.Inline>. The recommended behaviour is to pass all <Code.Inline>themeProps</Code.Inline> directly to the input. So please filter your props here in the <Code.Inline>renderField</Code.Inline> function.</P>\n          <P>Typically you want to set <Code.Inline>className</Code.Inline>, <Code.Inline>style</Code.Inline> or <Code.Inline>id</Code.Inline> props. But depending on your requirements you may also set e.g. <Code.Inline>onBlur</Code.Inline> handlers.</P>\n          <H3><Code.Inline>data.directProps</Code.Inline></H3>\n          <P>This field contains all the non-validation props that the user passes to the input (minus the <Code.Inline>name</Code.Inline>) prop. Use this to pass style or class information to the input. You may also allow custom props such as <Code.Inline>label</Code.Inline> or <Code.Inline>explanation</Code.Inline> and deal with those within your theme.</P>\n          <H3><Code.Inline>data.name</Code.Inline></H3>\n          <P>Contains the required <Code.Inline>name</Code.Inline> attribute passed to input. Might act as a good fallback if no better label is present.</P>\n          <H3><Code.Inline>data.validations</Code.Inline></H3>\n          <P>A list comprised of the validation objects for each validation on this input. It has a shape like this:</P>\n          <Code>{`\n            [\n              {name: 'required', isValid: true, errorMessage: '...', hintMessage: '...'},\n              {name: 'unique', isValid: \"pending\", errorMessage: '...', hintMessage: '...'},\n              {name: 'minlength', isValid: false, errorMessage: '...', hintMessage: '...'}\n            }\n          `}</Code>\n          <H3><Code.Inline>data.wrapperProps</Code.Inline></H3>\n          <P>When <Link to=\"/docs/wrap-input\">wrapping your inputs</Link> you may pass props to the <Code.Inline>WrapInput</Code.Inline> component. For example, it's recommended to pass a <Code.Inline>type</Code.Inline> prop to help differenatiate between different inputs. Have a look at the <b>Full example</b> above to see how it may help you.</P>\n          <H3><Code.Inline>data.directFormProps</Code.Inline></H3>\n          <P>Sometimes it might be useful to set some properties on a form that should affect all fields. Think of e.g. <Code.Inline>{'<Form onSubmit={...} fieldHeight=\"big\">'}</Code.Inline>. <Code.Inline>directFormProps</Code.Inline> allows you to access this information.</P>\n          <H3><Code.Inline>data.id</Code.Inline></H3>\n          <P>Contains a generated and unique id which can be used to bind a label to a input via <Code.Inline>htmlFor</Code.Inline>.</P>\n          <H3><Code.Inline>data.isDirty</Code.Inline></H3>\n          <P>Is <Code.Inline>true</Code.Inline> if the input's <Code.Inline>onChange</Code.Inline> was called once.</P>\n          <H3><Code.Inline>data.isTouched</Code.Inline></H3>\n          <P>Is <Code.Inline>true</Code.Inline> if the input's <Code.Inline>onFocus</Code.Inline> was called once.</P>\n          <H3><Code.Inline>data.isFocused</Code.Inline></H3>\n          <P>Is <Code.Inline>true</Code.Inline> if the input is currently focused.</P>\n          <H3><Code.Inline>data.submitForm</Code.Inline></H3>\n          <P>As with the <Code.Inline>renderForm</Code.Inline> function above, you have access to the form's submit handler to allow for custom submit behaviour. Have a look at the <Link to=\"/recipes/#submit-on-blur\">Submit on blur recipe</Link> to see how it might help.</P>\n          <H3><Code.Inline>data.formStatus</Code.Inline></H3>\n          <P>Contains the form's status described in the <Code.Inline>renderFormFn</Code.Inline> section above. Use it if you would like to disable the inputs while the form is <Code.Inline>'pending'</Code.Inline>.</P>\n        </Section>\n        <Section>\n          <H2>validationLabelsObject</H2>\n          <P>Specific themes might want to phrase validation messages differently. To allow for this feature, add a validation object of this shape to overwrite the validation's default messages:</P>\n          <Code>{`\n            {\n              required: {\n                errorMessage: (val, {name, arg}) => \\`'\\${name}' is really required\\`,\n                hintMessage: (val, {name, arg}) => \\`'\\${name}' needs to be set.\\`,\n              }\n            }\n          `}</Code>\n          <P>Note that you may omit either <Code.Inline>hintMessage</Code.Inline> or <Code.Inline>errorMessage</Code.Inline> to fallback to the validation's default message.</P>\n        </Section>\n      </Scaffold>\n    )\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/docs/Themes.js"],"sourceRoot":""}