webpackJsonp([5],{146:function(e,t,n){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var l=t[n];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(e,l.key,l)}}return function(t,n,l){return n&&e(t.prototype,n),l&&e(t,l),t}}(),o=n(2),d=l(o),s=n(20),c=function(e){function t(){return a(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return u(t,e),r(t,[{key:"render",value:function(){return d.default.createElement(s.Scaffold,null,d.default.createElement(s.H1,{mb5:!0},"Validations"),d.default.createElement(s.Section,null,d.default.createElement(s.P,null,"Validations consist of 4 parts. A ",d.default.createElement(s.Code.Inline,null,"name"),", an ",d.default.createElement(s.Code.Inline,null,"isValid")," function and an error and a hint message."),d.default.createElement(s.P,null,"You may omit defining a hint message in which case the error message will be passed as ",d.default.createElement(s.Code.Inline,null,"hintMessage")," to the ",d.default.createElement(s.Code.Inline,null,"renderField")," function.")),d.default.createElement(s.Section,null,d.default.createElement(s.H2,null,"Define a validation"),d.default.createElement(s.P,null,"Validations are passed to the ",d.default.createElement(s.Link,{to:"/docs/reform-context/"},d.default.createElement(s.Code.Inline,null,"ReformContext"))," component. This is where you assign a name to a validation. Have a look at this example to know how it works:"),d.default.createElement(s.Code,null,"\n            import React, {Component} from 'react'\n            import {render} from 'react-dom'\n            import {ReformContext, createTheme} from 'react-reform'\n\n            const defaultTheme = createTheme(...)\n\n            const validations = {\n              validUserName: {\n                isValid: val => /#\\W+(-\\W+)*/.test(val),\n                errorMessage: () => 'is not a valid username',\n                hintMessage: () => 'may contain letters, digits, underscores and dashes'\n              },\n              maxLength: {\n                isValid: (val, {arg}) => (val || '').toString().length <= arg,\n                errorMessage: (val, {arg}) => {\n                  const currLength = (val || '').toString().length\n                  return `maximal length: ${currLength}/${arg}`\n                },\n                hintMessage: (val, {arg}) => 'may contain letters at most ${arg} chars'\n              }\n            }\n\n            class App extends Component {\n\n              render() {\n                return (\n                  <ReformContext themes={{default: defaultTheme}} validations={validations}>\n                    <div>\n                      ...Your App Code...\n                    </div>\n                  </ReformContext>\n                )\n              }\n            }\n\n            render(<App/>, document.getElementById('root'))\n          "),d.default.createElement(s.P,null,"The two validations ",d.default.createElement(s.Code.Inline,null,"validUserName")," and ",d.default.createElement(s.Code.Inline,null,"maxLength")," may be used within inputs when prefixing either ",d.default.createElement(s.Code.Inline,null,"is")," or ",d.default.createElement(s.Code.Inline,null,"has"),":"),d.default.createElement(s.Code,null,'\n            <Form onSubmit={this.handleSubmit}>\n              <Text name="name" isValidUserName/>\n              <Textarea name="about" hasMaxLength={140}/>\n            </Form>\n          ')),d.default.createElement(s.Section,null,d.default.createElement(s.H2,null,"isValid: ",d.default.createElement(s.Code.Inline,null,"(val, data, revalidateFn) => (true|false|string)")),d.default.createElement(s.P,null,"This function determines whether a given input is valid or not. You may also return something else than ",d.default.createElement(s.Code.Inline,null,"true")," or ",d.default.createElement(s.Code.Inline,null,"false")," in case you have more states like e.g. ",d.default.createElement(s.Code.Inline,null,'"pending"'),". But be aware that submitting a form will only suceed if all inputs' validations return ",d.default.createElement(s.Code.Inline,null,"true"),"."),d.default.createElement(s.H3,null,d.default.createElement(s.Code.Inline,null,"val")),d.default.createElement(s.P,null,"Contains the current value of the input."),d.default.createElement(s.H3,null,d.default.createElement(s.Code.Inline,null,"data.arg")),d.default.createElement(s.P,null,"You may add options to a validation like ",d.default.createElement(s.Code.Inline,null,'<Text name="content" hasMaxLength={140}/>')," or even ",d.default.createElement(s.Code.Inline,null,"<Textarea name=\"username\" isUnique={{attribute: 'name', label: 'this better be a unique name'}}/>"),". You can access the passed prop value via this field."),d.default.createElement(s.H3,null,d.default.createElement(s.Code.Inline,null,"data.getValue(fieldName)")),d.default.createElement(s.P,null,"In case you want to access other field's values use this function. Imagine an input like ",d.default.createElement(s.Code.Inline,null,'<Text name="passwordRepeat" hasSameValueAs="password"/>'),", a useful implementation would be:"),d.default.createElement(s.Code,null,"\n            {\n              isValid: (val, {arg, getValue}) => val === getValue(arg),\n              ...\n            }\n          "),d.default.createElement(s.H3,null,d.default.createElement(s.Code.Inline,null,"revalidateFn")),d.default.createElement(s.P,null,"When dealing with asynchronous validatoins, you need to tell React Reform to revalidate the input once a result gets back to you. Use this function to do exactly this. See the section below for a full example.")),d.default.createElement(s.Section,null,d.default.createElement(s.H2,null,"hintMessage/errorMessage: ",d.default.createElement(s.Code.Inline,null,"(val, data) => (string|React element)")),d.default.createElement(s.P,null,"Use this to define two types of messages for your validation. The ",d.default.createElement(s.Code.Inline,null,"hintMessage")," is optional and the ",d.default.createElement(s.Code.Inline,null,"errorMessage"),"'s output will be used in the ",d.default.createElement(s.Code.Inline,null,"renderField")," function"),d.default.createElement(s.H3,null,d.default.createElement(s.Code.Inline,null,"val")),d.default.createElement(s.P,null,"Contains the current value of the input."),d.default.createElement(s.H3,null,d.default.createElement(s.Code.Inline,null,"data.arg")),d.default.createElement(s.P,null,"Same as ",d.default.createElement(s.Code.Inline,null,"isValid"),"'s ",d.default.createElement(s.Code.Inline,null,"data.arg")," described above."),d.default.createElement(s.H3,null,d.default.createElement(s.Code.Inline,null,"data.name")),d.default.createElement(s.P,null,"Contains the name of the field.")),d.default.createElement(s.Section,null,d.default.createElement(s.H2,null,"Asynchronous validation"),d.default.createElement(s.P,null,"It's also possible to define asynchronous validations. The API is rather similar. But rather than defining a validation description like above we're using a ",d.default.createElement("i",null,"function")," returning a validation description:"),d.default.createElement(s.Code,null,"\n            const validations = {\n              unique: () => {\n                const cachedResults = {}\n                return {\n                  isValid: (val, data, askAgain) => {\n                    if (!val) return true\n                    if (cachedResults[val] === undefined) {\n                      cachedResults[val] = 'pending'\n                      setTimeout(() => {\n                        cachedResults[val] = Math.random() > 0.5\n                        askAgain()\n                      }, 1000)\n                    }\n                    return cachedResults[val]\n                  },\n                  errorMessage: (val, {arg}) => `has to be unique. But '${val}' isn't`\n                }\n              }\n            }\n          "),d.default.createElement(s.P,null,"This function gets invoked once the input is mounted. This means that the ",d.default.createElement(s.Code.Inline,null,"cachedResults")," variable is unique for each input using this validation."),d.default.createElement(s.P,null,"As you can see we're doing any real request but simulate this via ",d.default.createElement(s.Code.Inline,null,"setTimeout"),". We fill the cache with a value and return this value on any subsequent validation request. Once we receive the proper value, we're calling the third argument of the ",d.default.createElement(s.Code.Inline,null,"isValid")," function, indicating that we'd like to be asked again, whether the input is valid.")))}}]),t}(d.default.Component);t.default=c}});
//# sourceMappingURL=5-e67b0.chunk.js.map