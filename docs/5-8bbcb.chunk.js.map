{"version":3,"sources":["webpack:///5-8bbcb.chunk.js","webpack:///./src/pages/docs/Validations.js"],"names":["webpackJsonp","149","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","_jsxFileName","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","_react","_react2","_layouts","Validations","_React$Component","this","getPrototypeOf","apply","arguments","createElement","Scaffold","__source","fileName","lineNumber","__self","H1","mb5","Section","P","Code","Inline","H2","Link","to","H3","Component"],"mappings":"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","file":"5-8bbcb.chunk.js","sourcesContent":["webpackJsonp([5],{\n\n/***/ 149:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tvar _jsxFileName = '/Users/danielberndt/workspace/react-reform/doc-engine/src/pages/docs/Validations.js';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _layouts = __webpack_require__(22);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar Validations = function (_React$Component) {\n\t  _inherits(Validations, _React$Component);\n\t\n\t  function Validations() {\n\t    _classCallCheck(this, Validations);\n\t\n\t    return _possibleConstructorReturn(this, (Validations.__proto__ || Object.getPrototypeOf(Validations)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Validations, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      return _react2.default.createElement(\n\t        _layouts.Scaffold,\n\t        {\n\t          __source: {\n\t            fileName: _jsxFileName,\n\t            lineNumber: 8\n\t          },\n\t          __self: this\n\t        },\n\t        _react2.default.createElement(\n\t          _layouts.H1,\n\t          { mb5: true, __source: {\n\t              fileName: _jsxFileName,\n\t              lineNumber: 9\n\t            },\n\t            __self: this\n\t          },\n\t          'Validations'\n\t        ),\n\t        _react2.default.createElement(\n\t          _layouts.Section,\n\t          {\n\t            __source: {\n\t              fileName: _jsxFileName,\n\t              lineNumber: 10\n\t            },\n\t            __self: this\n\t          },\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 11\n\t              },\n\t              __self: this\n\t            },\n\t            'Validations consist of 4 parts. A ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 11\n\t                },\n\t                __self: this\n\t              },\n\t              'name'\n\t            ),\n\t            ', an ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 11\n\t                },\n\t                __self: this\n\t              },\n\t              'isValid'\n\t            ),\n\t            ' function and an error and a hint message.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 12\n\t              },\n\t              __self: this\n\t            },\n\t            'You may omit defining a hint message in which case the error message will be passed as ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 12\n\t                },\n\t                __self: this\n\t              },\n\t              'hintMessage'\n\t            ),\n\t            ' to the ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 12\n\t                },\n\t                __self: this\n\t              },\n\t              'renderField'\n\t            ),\n\t            ' function.'\n\t          )\n\t        ),\n\t        _react2.default.createElement(\n\t          _layouts.Section,\n\t          {\n\t            __source: {\n\t              fileName: _jsxFileName,\n\t              lineNumber: 14\n\t            },\n\t            __self: this\n\t          },\n\t          _react2.default.createElement(\n\t            _layouts.H2,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 15\n\t              },\n\t              __self: this\n\t            },\n\t            'Define a validation'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 16\n\t              },\n\t              __self: this\n\t            },\n\t            'Validations are passed to the ',\n\t            _react2.default.createElement(\n\t              _layouts.Link,\n\t              { to: '/docs/reform-context/', __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 16\n\t                },\n\t                __self: this\n\t              },\n\t              _react2.default.createElement(\n\t                _layouts.Code.Inline,\n\t                {\n\t                  __source: {\n\t                    fileName: _jsxFileName,\n\t                    lineNumber: 16\n\t                  },\n\t                  __self: this\n\t                },\n\t                'ReformContext'\n\t              )\n\t            ),\n\t            ' component. This is where you assign a name to a validation. Have a look at this example to know how it works:'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.Code,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 17\n\t              },\n\t              __self: this\n\t            },\n\t            '\\n            import React, {Component} from \\'react\\'\\n            import {render} from \\'react-dom\\'\\n            import {ReformContext, createTheme} from \\'react-reform\\'\\n\\n            const defaultTheme = createTheme(...)\\n\\n            const validations = {\\n              validUserName: {\\n                isValid: val => /#\\\\W+(-\\\\W+)*/.test(val),\\n                errorMessage: () => \\'is not a valid username\\',\\n                hintMessage: () => \\'may contain letters, digits, underscores and dashes\\'\\n              },\\n              maxLength: {\\n                isValid: (val, {arg}) => (val || \\'\\').toString().length <= arg,\\n                errorMessage: (val, {arg}) => {\\n                  const currLength = (val || \\'\\').toString().length\\n                  return `maximal length: ${currLength}/${arg}`\\n                },\\n                hintMessage: (val, {arg}) => \\'may contain letters at most ${arg} chars\\'\\n              }\\n            }\\n\\n            class App extends Component {\\n\\n              render() {\\n                return (\\n                  <ReformContext themes={{default: defaultTheme}} validations={validations}>\\n                    <div>\\n                      ...Your App Code...\\n                    </div>\\n                  </ReformContext>\\n                )\\n              }\\n            }\\n\\n            render(<App/>, document.getElementById(\\'root\\'))\\n          '\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 55\n\t              },\n\t              __self: this\n\t            },\n\t            'The two validations ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 55\n\t                },\n\t                __self: this\n\t              },\n\t              'validUserName'\n\t            ),\n\t            ' and ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 55\n\t                },\n\t                __self: this\n\t              },\n\t              'maxLength'\n\t            ),\n\t            ' may be used within inputs when prefixing either ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 55\n\t                },\n\t                __self: this\n\t              },\n\t              'is-'\n\t            ),\n\t            ' or ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 55\n\t                },\n\t                __self: this\n\t              },\n\t              'has-'\n\t            ),\n\t            ':'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.Code,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 56\n\t              },\n\t              __self: this\n\t            },\n\t            '\\n            <Form onSubmit={this.handleSubmit}>\\n              <Text name=\"name\" is-validUserName/>\\n              <Textarea name=\"about\" has-maxLength={140}/>\\n            </Form>\\n          '\n\t          )\n\t        ),\n\t        _react2.default.createElement(\n\t          _layouts.Section,\n\t          {\n\t            __source: {\n\t              fileName: _jsxFileName,\n\t              lineNumber: 63\n\t            },\n\t            __self: this\n\t          },\n\t          _react2.default.createElement(\n\t            _layouts.H2,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 64\n\t              },\n\t              __self: this\n\t            },\n\t            'isValid: ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 64\n\t                },\n\t                __self: this\n\t              },\n\t              '(val, data, revalidateFn) => (true|false|string)'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 65\n\t              },\n\t              __self: this\n\t            },\n\t            'This function determines whether a given input is valid or not. You may also return something else than ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 65\n\t                },\n\t                __self: this\n\t              },\n\t              'true'\n\t            ),\n\t            ' or ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 65\n\t                },\n\t                __self: this\n\t              },\n\t              'false'\n\t            ),\n\t            ' in case you have more states like e.g. ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 65\n\t                },\n\t                __self: this\n\t              },\n\t              '\"pending\"'\n\t            ),\n\t            '. But be aware that submitting a form will only suceed if all inputs\\' validations return ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 65\n\t                },\n\t                __self: this\n\t              },\n\t              'true'\n\t            ),\n\t            '.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 66\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 66\n\t                },\n\t                __self: this\n\t              },\n\t              'val'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 67\n\t              },\n\t              __self: this\n\t            },\n\t            'Contains the current value of the input.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 68\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 68\n\t                },\n\t                __self: this\n\t              },\n\t              'data.arg'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 69\n\t              },\n\t              __self: this\n\t            },\n\t            'You may add options to a validation like ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 69\n\t                },\n\t                __self: this\n\t              },\n\t              '<Text name=\"content\" has-maxLength={140}/>'\n\t            ),\n\t            ' or even ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 69\n\t                },\n\t                __self: this\n\t              },\n\t              '<Textarea name=\"username\" is-unique={{attribute: \\'name\\', label: \\'this better be a unique name\\'}}/>'\n\t            ),\n\t            '. You can access the passed prop value via this field.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 70\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 70\n\t                },\n\t                __self: this\n\t              },\n\t              'data.getValue(fieldName)'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 71\n\t              },\n\t              __self: this\n\t            },\n\t            'In case you want to access other field\\'s values use this function. Imagine an input like ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 71\n\t                },\n\t                __self: this\n\t              },\n\t              '<Text name=\"passwordRepeat\" has-sameValueAs=\"password\"/>'\n\t            ),\n\t            ', a useful implementation would be:'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.Code,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 72\n\t              },\n\t              __self: this\n\t            },\n\t            '\\n            {\\n              isValid: (val, {arg, getValue}) => val === getValue(arg),\\n              ...\\n            }\\n          '\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 78\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 78\n\t                },\n\t                __self: this\n\t              },\n\t              'revalidateFn'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 79\n\t              },\n\t              __self: this\n\t            },\n\t            'When dealing with asynchronous validatoins, you need to tell React Reform to revalidate the input once a result gets back to you. Use this function to do exactly this. See the section below for a full example.'\n\t          )\n\t        ),\n\t        _react2.default.createElement(\n\t          _layouts.Section,\n\t          {\n\t            __source: {\n\t              fileName: _jsxFileName,\n\t              lineNumber: 81\n\t            },\n\t            __self: this\n\t          },\n\t          _react2.default.createElement(\n\t            _layouts.H2,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 82\n\t              },\n\t              __self: this\n\t            },\n\t            'hintMessage/errorMessage: ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 82\n\t                },\n\t                __self: this\n\t              },\n\t              '(val, data) => (string|React element)'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 83\n\t              },\n\t              __self: this\n\t            },\n\t            'Use this to define two types of messages for your validation. The ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 83\n\t                },\n\t                __self: this\n\t              },\n\t              'hintMessage'\n\t            ),\n\t            ' is optional and the ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 83\n\t                },\n\t                __self: this\n\t              },\n\t              'errorMessage'\n\t            ),\n\t            '\\'s output will be used in the ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 83\n\t                },\n\t                __self: this\n\t              },\n\t              'renderField'\n\t            ),\n\t            ' function'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 84\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 84\n\t                },\n\t                __self: this\n\t              },\n\t              'val'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 85\n\t              },\n\t              __self: this\n\t            },\n\t            'Contains the current value of the input.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 86\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 86\n\t                },\n\t                __self: this\n\t              },\n\t              'data.arg'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 87\n\t              },\n\t              __self: this\n\t            },\n\t            'Same as ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 87\n\t                },\n\t                __self: this\n\t              },\n\t              'isValid'\n\t            ),\n\t            '\\'s ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 87\n\t                },\n\t                __self: this\n\t              },\n\t              'data.arg'\n\t            ),\n\t            ' described above.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.H3,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 88\n\t              },\n\t              __self: this\n\t            },\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 88\n\t                },\n\t                __self: this\n\t              },\n\t              'data.name'\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 89\n\t              },\n\t              __self: this\n\t            },\n\t            'Contains the name of the field.'\n\t          )\n\t        ),\n\t        _react2.default.createElement(\n\t          _layouts.Section,\n\t          {\n\t            __source: {\n\t              fileName: _jsxFileName,\n\t              lineNumber: 91\n\t            },\n\t            __self: this\n\t          },\n\t          _react2.default.createElement(\n\t            _layouts.H2,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 92\n\t              },\n\t              __self: this\n\t            },\n\t            'Asynchronous validation'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 93\n\t              },\n\t              __self: this\n\t            },\n\t            'It\\'s also possible to define asynchronous validations. The API is rather similar. But rather than defining a validation description like above we\\'re using a ',\n\t            _react2.default.createElement(\n\t              'i',\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 93\n\t                },\n\t                __self: this\n\t              },\n\t              'function'\n\t            ),\n\t            ' returning a validation description:'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.Code,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 94\n\t              },\n\t              __self: this\n\t            },\n\t            '\\n            const validations = {\\n              unique: () => {\\n                const cachedResults = {}\\n                return {\\n                  isValid: (val, data, askAgain) => {\\n                    if (!val) return true\\n                    if (cachedResults[val] === undefined) {\\n                      cachedResults[val] = \\'pending\\'\\n                      setTimeout(() => {\\n                        cachedResults[val] = Math.random() > 0.5\\n                        askAgain()\\n                      }, 1000)\\n                    }\\n                    return cachedResults[val]\\n                  },\\n                  errorMessage: (val, {arg}) => `has to be unique. But \\'${val}\\' isn\\'t`\\n                }\\n              }\\n            }\\n          '\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 115\n\t              },\n\t              __self: this\n\t            },\n\t            'This function gets invoked once the input is mounted. This means that the ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 115\n\t                },\n\t                __self: this\n\t              },\n\t              'cachedResults'\n\t            ),\n\t            ' variable is unique for each input using this validation.'\n\t          ),\n\t          _react2.default.createElement(\n\t            _layouts.P,\n\t            {\n\t              __source: {\n\t                fileName: _jsxFileName,\n\t                lineNumber: 116\n\t              },\n\t              __self: this\n\t            },\n\t            'As you can see we\\'re doing any real request but simulate this via ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 116\n\t                },\n\t                __self: this\n\t              },\n\t              'setTimeout'\n\t            ),\n\t            '. We fill the cache with a value and return this value on any subsequent validation request. Once we receive the proper value, we\\'re calling the third argument of the ',\n\t            _react2.default.createElement(\n\t              _layouts.Code.Inline,\n\t              {\n\t                __source: {\n\t                  fileName: _jsxFileName,\n\t                  lineNumber: 116\n\t                },\n\t                __self: this\n\t              },\n\t              'isValid'\n\t            ),\n\t            ' function, indicating that we\\'d like to be asked again, whether the input is valid.'\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Validations;\n\t}(_react2.default.Component);\n\t\n\texports.default = Validations;\n\n/***/ }\n\n});\n\n\n// WEBPACK FOOTER //\n// 5-8bbcb.chunk.js","import React from 'react'\nimport {Scaffold, H1, H2, H3, P, Code, Section, Link} from 'comps/layouts'\n\nexport default class Validations extends React.Component {\n\n  render() {\n    return (\n      <Scaffold>\n        <H1 mb5>Validations</H1>\n        <Section>\n          <P>Validations consist of 4 parts. A <Code.Inline>name</Code.Inline>, an <Code.Inline>isValid</Code.Inline> function and an error and a hint message.</P>\n          <P>You may omit defining a hint message in which case the error message will be passed as <Code.Inline>hintMessage</Code.Inline> to the <Code.Inline>renderField</Code.Inline> function.</P>\n        </Section>\n        <Section>\n          <H2>Define a validation</H2>\n          <P>Validations are passed to the <Link to=\"/docs/reform-context/\"><Code.Inline>ReformContext</Code.Inline></Link> component. This is where you assign a name to a validation. Have a look at this example to know how it works:</P>\n          <Code>{`\n            import React, {Component} from 'react'\n            import {render} from 'react-dom'\n            import {ReformContext, createTheme} from 'react-reform'\n\n            const defaultTheme = createTheme(...)\n\n            const validations = {\n              validUserName: {\n                isValid: val => /#\\\\W+(-\\\\W+)*/.test(val),\n                errorMessage: () => 'is not a valid username',\n                hintMessage: () => 'may contain letters, digits, underscores and dashes'\n              },\n              maxLength: {\n                isValid: (val, {arg}) => (val || '').toString().length <= arg,\n                errorMessage: (val, {arg}) => {\n                  const currLength = (val || '').toString().length\n                  return \\`maximal length: \\${currLength}/\\${arg}\\`\n                },\n                hintMessage: (val, {arg}) => 'may contain letters at most \\${arg} chars'\n              }\n            }\n\n            class App extends Component {\n\n              render() {\n                return (\n                  <ReformContext themes={{default: defaultTheme}} validations={validations}>\n                    <div>\n                      ...Your App Code...\n                    </div>\n                  </ReformContext>\n                )\n              }\n            }\n\n            render(<App/>, document.getElementById('root'))\n          `}</Code>\n          <P>The two validations <Code.Inline>validUserName</Code.Inline> and <Code.Inline>maxLength</Code.Inline> may be used within inputs when prefixing either <Code.Inline>is-</Code.Inline> or <Code.Inline>has-</Code.Inline>:</P>\n          <Code>{`\n            <Form onSubmit={this.handleSubmit}>\n              <Text name=\"name\" is-validUserName/>\n              <Textarea name=\"about\" has-maxLength={140}/>\n            </Form>\n          `}</Code>\n        </Section>\n        <Section>\n          <H2>isValid: <Code.Inline>(val, data, revalidateFn) => (true|false|string)</Code.Inline></H2>\n          <P>This function determines whether a given input is valid or not. You may also return something else than <Code.Inline>true</Code.Inline> or <Code.Inline>false</Code.Inline> in case you have more states like e.g. <Code.Inline>\"pending\"</Code.Inline>. But be aware that submitting a form will only suceed if all inputs' validations return <Code.Inline>true</Code.Inline>.</P>\n          <H3><Code.Inline>val</Code.Inline></H3>\n          <P>Contains the current value of the input.</P>\n          <H3><Code.Inline>data.arg</Code.Inline></H3>\n          <P>You may add options to a validation like <Code.Inline>{'<Text name=\"content\" has-maxLength={140}/>'}</Code.Inline> or even <Code.Inline>{'<Textarea name=\"username\" is-unique={{attribute: \\'name\\', label: \\'this better be a unique name\\'}}/>'}</Code.Inline>. You can access the passed prop value via this field.</P>\n          <H3><Code.Inline>data.getValue(fieldName)</Code.Inline></H3>\n          <P>In case you want to access other field's values use this function. Imagine an input like <Code.Inline>{'<Text name=\"passwordRepeat\" has-sameValueAs=\"password\"/>'}</Code.Inline>, a useful implementation would be:</P>\n          <Code>{`\n            {\n              isValid: (val, {arg, getValue}) => val === getValue(arg),\n              ...\n            }\n          `}</Code>\n          <H3><Code.Inline>revalidateFn</Code.Inline></H3>\n          <P>When dealing with asynchronous validatoins, you need to tell React Reform to revalidate the input once a result gets back to you. Use this function to do exactly this. See the section below for a full example.</P>\n        </Section>\n        <Section>\n          <H2>hintMessage/errorMessage: <Code.Inline>(val, data) => (string|React element)</Code.Inline></H2>\n          <P>Use this to define two types of messages for your validation. The <Code.Inline>hintMessage</Code.Inline> is optional and the <Code.Inline>errorMessage</Code.Inline>'s output will be used in the <Code.Inline>renderField</Code.Inline> function</P>\n          <H3><Code.Inline>val</Code.Inline></H3>\n          <P>Contains the current value of the input.</P>\n          <H3><Code.Inline>data.arg</Code.Inline></H3>\n          <P>Same as <Code.Inline>isValid</Code.Inline>'s <Code.Inline>data.arg</Code.Inline> described above.</P>\n          <H3><Code.Inline>data.name</Code.Inline></H3>\n          <P>Contains the name of the field.</P>\n        </Section>\n        <Section>\n          <H2>Asynchronous validation</H2>\n          <P>It's also possible to define asynchronous validations. The API is rather similar. But rather than defining a validation description like above we're using a <i>function</i> returning a validation description:</P>\n          <Code>{`\n            const validations = {\n              unique: () => {\n                const cachedResults = {}\n                return {\n                  isValid: (val, data, askAgain) => {\n                    if (!val) return true\n                    if (cachedResults[val] === undefined) {\n                      cachedResults[val] = 'pending'\n                      setTimeout(() => {\n                        cachedResults[val] = Math.random() > 0.5\n                        askAgain()\n                      }, 1000)\n                    }\n                    return cachedResults[val]\n                  },\n                  errorMessage: (val, {arg}) => \\`has to be unique. But '\\${val}' isn't\\`\n                }\n              }\n            }\n          `}</Code>\n          <P>This function gets invoked once the input is mounted. This means that the <Code.Inline>cachedResults</Code.Inline> variable is unique for each input using this validation.</P>\n          <P>As you can see we're doing any real request but simulate this via <Code.Inline>setTimeout</Code.Inline>. We fill the cache with a value and return this value on any subsequent validation request. Once we receive the proper value, we're calling the third argument of the <Code.Inline>isValid</Code.Inline> function, indicating that we'd like to be asked again, whether the input is valid.</P>\n        </Section>\n      </Scaffold>\n    )\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/docs/Validations.js"],"sourceRoot":""}