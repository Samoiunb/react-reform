webpackJsonp([5],{145:function(e,t,n){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var r="/Users/danielberndt/workspace/react-reform/doc-engine/src/pages/docs/Validations.js",u=function(){function e(e,t){for(var n=0;n<t.length;n++){var l=t[n];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(e,l.key,l)}}return function(t,n,l){return n&&e(t.prototype,n),l&&e(t,l),t}}(),o=n(2),m=l(o),f=n(21),_=function(e){function t(){return a(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return s(t,e),u(t,[{key:"render",value:function(){return m.default.createElement(f.Scaffold,{__source:{fileName:r,lineNumber:8},__self:this},m.default.createElement(f.H1,{mb5:!0,__source:{fileName:r,lineNumber:9},__self:this},"Validations"),m.default.createElement(f.Section,{__source:{fileName:r,lineNumber:10},__self:this},m.default.createElement(f.P,{__source:{fileName:r,lineNumber:11},__self:this},"Validations consist of 4 parts. A ",m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:11},__self:this},"name"),", an ",m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:11},__self:this},"isValid")," function and an error and a hint message."),m.default.createElement(f.P,{__source:{fileName:r,lineNumber:12},__self:this},"You may omit defining a hint message in which case the error message will be passed as ",m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:12},__self:this},"hintMessage")," to the ",m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:12},__self:this},"renderField")," function.")),m.default.createElement(f.Section,{__source:{fileName:r,lineNumber:14},__self:this},m.default.createElement(f.H2,{__source:{fileName:r,lineNumber:15},__self:this},"Define a validation"),m.default.createElement(f.P,{__source:{fileName:r,lineNumber:16},__self:this},"Validations are passed to the ",m.default.createElement(f.Link,{to:"/docs/reform-context/",__source:{fileName:r,lineNumber:16},__self:this},m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:16},__self:this},"ReformContext"))," component. This is where you assign a name to a validation. Have a look at this example to know how it works:"),m.default.createElement(f.Code,{__source:{fileName:r,lineNumber:17},__self:this},"\n            import React, {Component} from 'react'\n            import {render} from 'react-dom'\n            import {ReformContext, createTheme} from 'react-reform'\n\n            const defaultTheme = createTheme(...)\n\n            const validations = {\n              validUserName: {\n                isValid: val => /#\\W+(-\\W+)*/.test(val),\n                errorMessage: () => 'is not a valid username',\n                hintMessage: () => 'may contain letters, digits, underscores and dashes'\n              },\n              maxLength: {\n                isValid: (val, {arg}) => (val || '').toString().length <= arg,\n                errorMessage: (val, {arg}) => {\n                  const currLength = (val || '').toString().length\n                  return `maximal length: ${currLength}/${arg}`\n                },\n                hintMessage: (val, {arg}) => 'may contain letters at most ${arg} chars'\n              }\n            }\n\n            class App extends Component {\n\n              render() {\n                return (\n                  <ReformContext themes={{default: defaultTheme}} validations={validations}>\n                    <div>\n                      ...Your App Code...\n                    </div>\n                  </ReformContext>\n                )\n              }\n            }\n\n            render(<App/>, document.getElementById('root'))\n          "),m.default.createElement(f.P,{__source:{fileName:r,lineNumber:55},__self:this},"The two validations ",m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:55},__self:this},"validUserName")," and ",m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:55},__self:this},"maxLength")," may be used within inputs when prefixing either ",m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:55},__self:this},"is-")," or ",m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:55},__self:this},"has-"),":"),m.default.createElement(f.Code,{__source:{fileName:r,lineNumber:56},__self:this},'\n            <Form onSubmit={this.handleSubmit}>\n              <Text name="name" is-validUserName/>\n              <Textarea name="about" has-maxLength={140}/>\n            </Form>\n          ')),m.default.createElement(f.Section,{__source:{fileName:r,lineNumber:63},__self:this},m.default.createElement(f.H2,{__source:{fileName:r,lineNumber:64},__self:this},"isValid: ",m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:64},__self:this},"(val, data, revalidateFn) => (true|false|string)")),m.default.createElement(f.P,{__source:{fileName:r,lineNumber:65},__self:this},"This function determines whether a given input is valid or not. You may also return something else than ",m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:65},__self:this},"true")," or ",m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:65},__self:this},"false")," in case you have more states like e.g. ",m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:65},__self:this},'"pending"'),". But be aware that submitting a form will only suceed if all inputs' validations return ",m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:65},__self:this},"true"),"."),m.default.createElement(f.H3,{__source:{fileName:r,lineNumber:66},__self:this},m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:66},__self:this},"val")),m.default.createElement(f.P,{__source:{fileName:r,lineNumber:67},__self:this},"Contains the current value of the input."),m.default.createElement(f.H3,{__source:{fileName:r,lineNumber:68},__self:this},m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:68},__self:this},"data.arg")),m.default.createElement(f.P,{__source:{fileName:r,lineNumber:69},__self:this},"You may add options to a validation like ",m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:69},__self:this},'<Text name="content" has-maxLength={140}/>')," or even ",m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:69},__self:this},"<Textarea name=\"username\" is-unique={{attribute: 'name', label: 'this better be a unique name'}}/>"),". You can access the passed prop value via this field."),m.default.createElement(f.H3,{__source:{fileName:r,lineNumber:70},__self:this},m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:70},__self:this},"data.getValue(fieldName)")),m.default.createElement(f.P,{__source:{fileName:r,lineNumber:71},__self:this},"In case you want to access other field's values use this function. Imagine an input like ",m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:71},__self:this},'<Text name="passwordRepeat" has-sameValueAs="password"/>'),", a useful implementation would be:"),m.default.createElement(f.Code,{__source:{fileName:r,lineNumber:72},__self:this},"\n            {\n              isValid: (val, {arg, getValue}) => val === getValue(arg),\n              ...\n            }\n          "),m.default.createElement(f.H3,{__source:{fileName:r,lineNumber:78},__self:this},m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:78},__self:this},"revalidateFn")),m.default.createElement(f.P,{__source:{fileName:r,lineNumber:79},__self:this},"When dealing with asynchronous validatoins, you need to tell React Reform to revalidate the input once a result gets back to you. Use this function to do exactly this. See the section below for a full example.")),m.default.createElement(f.Section,{__source:{fileName:r,lineNumber:81},__self:this},m.default.createElement(f.H2,{__source:{fileName:r,lineNumber:82},__self:this},"hintMessage/errorMessage: ",m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:82},__self:this},"(val, data) => (string|React element)")),m.default.createElement(f.P,{__source:{fileName:r,lineNumber:83},__self:this},"Use this to define two types of messages for your validation. The ",m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:83},__self:this},"hintMessage")," is optional and the ",m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:83},__self:this},"errorMessage"),"'s output will be used in the ",m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:83},__self:this},"renderField")," function"),m.default.createElement(f.H3,{__source:{fileName:r,lineNumber:84},__self:this},m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:84},__self:this},"val")),m.default.createElement(f.P,{__source:{fileName:r,lineNumber:85},__self:this},"Contains the current value of the input."),m.default.createElement(f.H3,{__source:{fileName:r,lineNumber:86},__self:this},m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:86},__self:this},"data.arg")),m.default.createElement(f.P,{__source:{fileName:r,lineNumber:87},__self:this},"Same as ",m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:87},__self:this},"isValid"),"'s ",m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:87},__self:this},"data.arg")," described above."),m.default.createElement(f.H3,{__source:{fileName:r,lineNumber:88},__self:this},m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:88},__self:this},"data.name")),m.default.createElement(f.P,{__source:{fileName:r,lineNumber:89},__self:this},"Contains the name of the field.")),m.default.createElement(f.Section,{__source:{fileName:r,lineNumber:91},__self:this},m.default.createElement(f.H2,{__source:{fileName:r,lineNumber:92},__self:this},"Asynchronous validation"),m.default.createElement(f.P,{__source:{fileName:r,lineNumber:93},__self:this},"It's also possible to define asynchronous validations. The API is rather similar. But rather than defining a validation description like above we're using a ",m.default.createElement("i",{__source:{fileName:r,lineNumber:93},__self:this},"function")," returning a validation description:"),m.default.createElement(f.Code,{__source:{fileName:r,lineNumber:94},__self:this},"\n            const validations = {\n              unique: () => {\n                const cachedResults = {}\n                return {\n                  isValid: (val, data, askAgain) => {\n                    if (!val) return true\n                    if (cachedResults[val] === undefined) {\n                      cachedResults[val] = 'pending'\n                      setTimeout(() => {\n                        cachedResults[val] = Math.random() > 0.5\n                        askAgain()\n                      }, 1000)\n                    }\n                    return cachedResults[val]\n                  },\n                  errorMessage: (val, {arg}) => `has to be unique. But '${val}' isn't`\n                }\n              }\n            }\n          "),m.default.createElement(f.P,{__source:{fileName:r,lineNumber:115},__self:this},"This function gets invoked once the input is mounted. This means that the ",m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:115},__self:this},"cachedResults")," variable is unique for each input using this validation."),m.default.createElement(f.P,{__source:{fileName:r,lineNumber:116},__self:this},"As you can see we're doing any real request but simulate this via ",m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:116},__self:this},"setTimeout"),". We fill the cache with a value and return this value on any subsequent validation request. Once we receive the proper value, we're calling the third argument of the ",m.default.createElement(f.Code.Inline,{__source:{fileName:r,lineNumber:116},__self:this},"isValid")," function, indicating that we'd like to be asked again, whether the input is valid.")))}}]),t}(m.default.Component);t.default=_}});
//# sourceMappingURL=5-22c63.chunk.js.map